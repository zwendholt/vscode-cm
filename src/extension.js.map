{
    "version": 3,
    "sources": ["../webpack/bootstrap", "../external \"vscode\"", "../external \"fs\"", ".././src/cmConfig.ts", ".././src/extension.ts", "../external \"path\"", "../external \"child_process\"", ".././src/cmGlobals.ts", ".././src/cmDeclaration.ts", ".././src/cmSuggest80.ts", ".././src/cmFormat.ts", ".././src/cmHover.ts", ".././src/helpers/variableFinder.ts", ".././src/cmExplorer.ts", ".././src/cmFileSymbolProvider.ts", ".././src/cmMode.ts", ".././src/helpers/reload.ts", ".././src/cmCompilerAdapter.ts", ".././src/cmOutputChannel.ts", ".././src/cmReferenceProvider.ts", ".././node_modules/node-cm/index.js", ".././src/cmUtils.ts", ".././src/commands.ts"],
    "names": ["installedModules", "__webpack_require__", "moduleId", "exports", "module", "i", "l", "modules", "call", "m", "c", "d", "name", "getter", "o", "Object", "defineProperty", "enumerable", "get", "r", "Symbol", "toStringTag", "value", "t", "mode", "__esModule", "ns", "create", "key", "bind", "n", "object", "property", "prototype", "hasOwnProperty", "p", "s", "require", "vscode", "fs", "path", "cmConfig", "[object Object]", "this", "getConfig", "workspace", "workspaceFolders", "length", "uri", "fsPath", "Promise", "resolve", "window", "showWorkspaceFolderPick", "then", "choice", "rootPath", "isEnabled", "root", "match", "console", "log", "toString", "force", "cmRoot", "existsSync", "join", "cmGitMode", "useNewSyntax", "getConfiguration", "LangName", "vscode_1", "cmDeclaration_1", "cmSuggest80_1", "cmFormat_1", "cmHover_1", "cmExplorer_1", "cmFileSymbolProvider_1", "cmMode_1", "reload_1", "cmCompilerAdapter_1", "cmConfig_1", "cmUtils_1", "commands_1", "cmGlobals_1", "diagnosticCollection", "compilerAdapter", "setupConfigListener", "ctx", "onDidChangeConfiguration", "e", "affectsConfiguration", "filePath", "readFile", "encoding", "err", "data", "config", "JSON", "parse", "requestedSyntax", "contributes", "grammars", "writeFileSync", "stringify", "showReloadConfirm", "v", "commands", "executeCommand", "updatePackageConfig", "asAbsolutePath", "createWatcher", "func", "extension", "dict", "addWatcher", "wf", "watcher", "createFileSystemWatcher", "RelativePattern", "push", "onDidCreate", "forEach", "onDidChangeWorkspaceFolders", "added", "a", "removed", "find", "getCompiler", "activate", "context", "disposables", "languages", "createDiagnosticCollection", "cmCompilerAdapter", "cmOutputFilePath", "setup", "cmUtils", "addCopyright", "createResourceTemplate", "onDidChangeActiveTextEditor", "editor", "foldCopyright", "rsWatcherEnabled", "onDidSaveTextDocument", "fileName", "endsWith", "runIfStarted", "replace", "registerDefinitionProvider", "CM_MODE", "CMDefinitionProvider", "cmAutoComplete80Enabled", "registerCompletionItemProvider", "CM80CompletionItemProvider", "registerDocumentSymbolProvider", "CMFileSymbolProvider", "registerDocumentFormattingEditProvider", "ClangDocumentFormattingEditProvider", "registerHoverProvider", "CMHoverProvider", "registerTreeDataProvider", "CmTreeDataProvider", "registerReferenceProvider", "refProvider", "isDebug", "registerCommands", "subscriptions", "cmReferenceProvider_1", "CMReferenceProvider", "extension_1", "compiler", "document", "position", "token", "isDirty", "file", "rsv", "rj", "save", "res", "compileFile", "setTimeout", "runDef", "offset", "offsetAt", "line", "goto", "reject", "runStatement", "start", "code", "getOffset", "successEx", "failureEx", "doNotClear", "allMatches", "getAllMatches", "items", "getFieldCalls", "getClassTypes", "getOverrides", "CompletionList", "exec", "sigMatch", "retMatch", "item", "CompletionItem", "CompletionItemKind", "Function", "insertText", "docs", "MarkdownString", "appendCodeblock", "documentation", "Class", "type", "startsWith", "Method", "Property", "params", "rtnType", "snipStr", "count", "element", "snip", "substring", "SnippetString", "label", "appendText", "regex", "cp", "formatCommand", "options", "doFormatDocument", "filename", "stdout", "stderr", "showInformationMessage", "text", "reg", "methodSigs", "result", "old", "new", "lastLine", "lineCount", "lastLineLastCol", "lineAt", "range", "end", "character", "Range", "TextEdit", "variableFinder_1", "wordRange", "getWordRangeAtPosition", "word", "getText", "results", "VariableFinder", "findDefinitionInText", "Hover", "language", "VariableFindResult", "variable", "matches", "content", "pattern", "RegExp", "index", "split", "substr", "CmNode", "entry", "_parent", "_resource", "resource", "isFolder", "CmModel", "roots", "parseDirectory", "node", "fullPath", "rej", "readdir", "files", "filtered", "filter", "f", "statSync", "isDirectory", "sort", "map", "nodes", "n1", "n2", "localeCompare", "_onDidChangeTreeData", "EventEmitter", "onDidChangeTreeData", "event", "collapsibleState", "TreeItemCollapsibleState", "Collapsed", "command", "arguments", "title", "iconPath", "light", "__filename", "dark", "model", "getChildren", "cmPath", "symbols", "kind", "SymbolKind", "txt", "pos", "positionAt", "SymbolInformation", "getNameFromKind", "Location", "scheme", "msg", "cmOutputChannel_1", "compilerContainer", "diagnostics", "isStarted", "channel", "cmOutputChannel", "gitMode", "onRead", "write", "onError", "cmArch", "arch", "kill", "clearOutputIfNeeded", "writeOutputToFile", "success", "clear", "clean", "startIfNotStarted", "succuess", "currentWorkspace", "run", "statement", "addOutputWatch", "clearOutputWatch", "cmCode", "runFile", "quitDebug", "promise", "goToDefinitionPromise", "skip", "clearOutputOnBuild", "diags", "isResolving", "partial", "output", "createOutputChannel", "hashOutput", "parsers", "FindReferencesParser", "activeParsers", "appendLine", "append", "lineResults", "lineParser", "newLines", "goToPromise", "goToResolver", "goToRejector", "loc", "error", "rawData", "indexOf", "lines", "errorRegex", "gotoRegex", "nextErrorRegex", "cetAltClickRegex", "cmACRegex", "cmPrompt", "invokeDate", "Date", "now", "blocked", "aParse", "isActive", "exclusive", "started", "complete", "errorMatch", "cetAltClickMatch", "nextErrorMatch", "test", "goToFileLocation", "parseInt", "openTextDocument", "doc", "Uri", "severity", "DiagnosticSeverity", "Error", "Warning", "setDiagnostics", "watchSuccess", "watchResolve", "watchFail", "watchReject", "hashLines", "fail", "showTextDocument", "revealRange", "TextEditorRevealType", "InCenter", "column", "desc", "level", "textLine", "diag", "Diagnostic", "set", "srcMatch", "SrcRefParser", "lineM", "didMatch", "rest", "super", "startR", "endR", "gotoRes", "first", "clearCache", "addReference", "abort", "pRes", "pRej", "findReferences", "cache", "startPos", "Position", "endPos", "__dirname", "proc", "self", "_cm", "_options", "_onRead", "_onError", "_onExit", "onExit", "CM_ROOT", "CM_HOME", "args", "spawn", "on", "_isCompilerReady", "cmd", "_makeCommand", "debug", "stdin", "execSync", "folder", "activeTextEditor", "lastIndexOf", "readFileSync", "usings", "getWorkspaceFolder", "matchIndex", "symPath", "parent", "dirs", "readdirSync", "subDirs", "dir", "concat", "getDirsUnder", "varName", "obj", "memberName", "singleUseRegex", "multiUseRegexPrefix", "contents", "prefix", "trim", "globalUsings", "packageFileUsings", "u", "getDottedCallsFromString", "inputFile", "lineExtracted", "statementStack", "lineOfCode", "lineTerminators", "currentChar", "charAt", "shouldPush", "peek", "pop", "properLine", "reverse", "wait", "immediate", "timeOut", "timeout", "callNow", "clearTimeout", "apply", "copy", "pkg", "asRelativePath", "nameSpace", "getCurrentPackage", "wEdit", "WorkspaceEdit", "applyEdit", "edit", "insert", "fileStart", "selection", "Selection", "newPosition", "newSelection", "template", "scriptPackage", "scriptFuncs", "d1", "registerCommand", "d2", "stop", "d3", "d4", "d5", "d6", "validateCMFileAndRun", "active", "d7", "runCurrentFile", "d8", "d9", "d10", "loadAllKnown", "d11", "getFilePathInUserProfile", "d12", "compileVSWorkspace", "d14", "compileWorkspace", "d15", "startWritingOutputFile", "d16", "stopWritingOutputFile", "scripts", "showQuickPick", "myReg", "packageReg", "myArr", "picked", "d20", "preserveFocus", "preview", "getPosition", "d21", "d22", "Disposable", "from", "requireCMFile", "languageId", "userName", "process", "env", "showErrorMessage", "profilePath", "toLowerCase", "selectionLines", "val", "InCenterIfOutsideViewport"],
    "mappings": "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",
    "file": "extension.js",
    "sourcesContent": [" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n", "module.exports = require(\"vscode\");", "module.exports = require(\"fs\");", "'use strict';\r\n\r\nimport vscode = require('vscode');\r\nimport { getCompiler } from './extension';\r\nimport fs = require('fs');\r\nimport path = require('path');\r\n\r\nexport class cmConfig {\r\n    \r\n    static LangName = \"cm\";\r\n    static root: string = null;\r\n    \r\n    static isDebug(): boolean {\r\n        return this.getConfig()[\"debugMode\"];\r\n    }\r\n\r\n    static currentWorkspace(): Thenable<string> {\r\n        if ( vscode.workspace.workspaceFolders ) {\r\n            if ( vscode.workspace.workspaceFolders.length == 1 ) {\r\n                let path = vscode.workspace.workspaceFolders[0].uri.fsPath;\r\n                return Promise.resolve(path);\r\n            } else {\r\n                return vscode.window.showWorkspaceFolderPick()\r\n                .then( choice => {\r\n                    return choice.uri.fsPath;\r\n                } );\r\n                \r\n                // return vscode.workspace.workspaceFolders[0].uri.path;\r\n            }\r\n        } else {\r\n            return Promise.resolve(vscode.workspace.rootPath);\r\n        }\r\n    }\r\n\r\n    static cmAutoComplete80Enabled(): boolean {\r\n        let isEnabled = this.getConfig()[\"autoComplete80Enabled\"]; \r\n        if ( typeof isEnabled !== \"boolean\" ) {\r\n            isEnabled = false;\r\n        }\r\n        return isEnabled;\r\n    }\r\n\r\n    static clearOutputOnBuild(): boolean {\r\n        let isEnabled = this.getConfig()[\"clearOutputBuild\"]; \r\n        if ( typeof isEnabled !== \"boolean\" ) {\r\n            isEnabled = false;\r\n        }\r\n        return isEnabled;\r\n    }\r\n    \r\n    static cmOutputFilePath(): string {\r\n        return this.getConfig()[\"outputFilePath\"];\r\n    }\r\n    \r\n    static cmRoot(): string {\r\n        if ( !this.root ) {\r\n            // this needs to be a bit smarter, but for now we use the first folder\r\n            const match = vscode.workspace.workspaceFolders[0].uri.fsPath.match( /.*(?=\\\\home\\\\|\\\\base\\\\|\\\\extensions\\\\|\\\\personal\\\\)/ );\r\n            this.root = this.getConfig()[\"root\"];\r\n            if ( this.root == \"auto\" && match && match.length > 0 ) {\r\n                console.log(\"CM Root Auto Mode - Using Path '\" + match.toString() + \"'\");\r\n                this.root = match.toString();\r\n            }\r\n        }\r\n        return this.root;\r\n    }\r\n    \r\n    static cmGitMode(): boolean {\r\n        let force = this.getConfig()[\"gitMode\"];\r\n        if ( typeof force !== 'undefined' ) return force;\r\n        // attempt to autodetect\r\n        let root = this.cmRoot();\r\n        return fs.existsSync( path.join(root, 'base' ) );\r\n    }\r\n\r\n    static cmPath(): string {\r\n        return this.cmRoot() + (this.cmGitMode() ? \"\\\\base\" : \"\\\\home\");\r\n    }\r\n\r\n    static arch(): string {\r\n        return \"win64\";\r\n    }\r\n\r\n    static rsWatcherEnabled(): Boolean {\r\n        return this.getConfig()[\"rsSaveWatch\"];\r\n    }\r\n\r\n    static useNewSyntax(): Boolean {\r\n        let useNewSyntax = this.getConfig()[\"newSyntax\"]; \r\n        if ( typeof useNewSyntax !== \"boolean\" ) {\r\n            useNewSyntax = false;\r\n        }\r\n        return useNewSyntax;\r\n    }\r\n    \r\n    static emacsClientExe() {\r\n        return this.getConfig()[\"emacsclientexe\"];\r\n    }\r\n    \r\n    static emacsServerFile() {\r\n        return this.getConfig()[\"emacsserverfile\"];\r\n    }\r\n    \r\n    private static getConfig() {\r\n        return vscode.workspace.getConfiguration(this.LangName);\r\n    }\r\n    \r\n}", "// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport { commands, DiagnosticCollection, Disposable, extensions, Extension, ExtensionContext, FileSystemWatcher, languages, window, workspace, RelativePattern, WorkspaceFolder, TextDocument, Uri } from 'vscode';\r\n\r\nimport { CMDefinitionProvider } from './cmDeclaration';\r\nimport { CM80CompletionItemProvider } from './cmSuggest80';\r\nimport SignatureHelpProvider from './cmSignatureHelper'\r\nimport { ClangDocumentFormattingEditProvider } from './cmFormat';\r\nimport { CMHoverProvider } from './cmHover';\r\nimport { CmTreeDataProvider } from './cmExplorer';\r\n// import { CMWorkspaceSymbolProvider } from './cmWorkspaceSymbolProvider';\r\nimport { CmCodeActionProvider } from './cmCodeActions';\r\nimport { CMFileSymbolProvider } from './cmFileSymbolProvider';\r\nimport { CM_MODE } from './cmMode';\r\nimport { showReloadConfirm } from './helpers/reload';\r\n\r\nimport { cmCompilerAdapter } from './cmCompilerAdapter';\r\nimport { cmConfig } from './cmConfig';\r\nimport { cmUtils } from './cmUtils';\r\n\r\nimport { registerCommands, foldCopyright } from './commands';\r\nimport { watch } from 'fs';\r\nimport fs = require('fs');\r\n\r\nimport { setup as gSetup, refProvider } from './cmGlobals';\r\n\r\nlet diagnosticCollection: DiagnosticCollection;\r\nlet compilerAdapter: cmCompilerAdapter;\r\n\r\nexport function getCompiler(): cmCompilerAdapter {\r\n    return compilerAdapter;\r\n}\r\n\r\nfunction setupConfigListener( ctx: ExtensionContext ) {\r\n    workspace.onDidChangeConfiguration( (e) => {\r\n        if ( e.affectsConfiguration( \"cm.newSyntax\" ) ) {\r\n            updatePackageConfig( ctx.asAbsolutePath(\"package.json\") );\r\n        }\r\n    } );\r\n}\r\n\r\nfunction updatePackageConfig( filePath: string  ) {\r\n    fs.readFile( filePath, {encoding: \"utf8\"}, (err,data) => {\r\n        if ( err ) {\r\n            console.log(\"Couldn't find config\");\r\n            return;\r\n        }\r\n        let config = JSON.parse(data);\r\n        // console.log(config.contributes.grammars[0].path);\r\n        let requestedSyntax = \"./syntaxes/\" + ( cmConfig.useNewSyntax() ? \"cm.tmLanguage.json\" : \"CM.plist\");\r\n        console.log(\"REQUESTED CM SYNTAX \" + requestedSyntax );\r\n        if ( config.contributes.grammars[0].path != requestedSyntax ) {\r\n            console.log(\"Changing CM Syntax Config\");\r\n            config.contributes.grammars[0].path = \"./syntaxes/\" + ( cmConfig.useNewSyntax() ? \"cm.tmLanguage.json\" : \"CM.plist\");\r\n            fs.writeFileSync( filePath, JSON.stringify(config, null, 2) );\r\n            \r\n            showReloadConfirm( \"You CM Language syntax setting was changed you must reload VSCode for the change to take effect\" )\r\n            .then( (v) => {\r\n                if ( v ) commands.executeCommand( \"workbench.action.reloadWindow\" );\r\n            });\r\n            \r\n        }\r\n    } );\r\n}\r\n\r\n// this method is called when your extension is activated\r\n// your extension is activated the very first time the command is executed\r\nexport function activate(context: ExtensionContext) {\r\n    setupConfigListener( context );\r\n    const disposables: Disposable[] = [];\r\n    \r\n    console.log(\"--STARTING CM EXTENSION--\");\r\n\r\n    // console.log(cmConfig.currentWorkspace());\r\n\r\n    \r\n    diagnosticCollection = languages.createDiagnosticCollection( \"cm\" );\r\n    // setup compiler Adapter\r\n    compilerAdapter = new cmCompilerAdapter( diagnosticCollection, cmConfig.cmOutputFilePath() );\r\n    gSetup();\r\n    \r\n    // setup watcher\r\n    var cmWatcher = createCmWatcher();\r\n    var rsWatcher = createRsWatcher();\r\n\r\n    window.onDidChangeActiveTextEditor( (editor) => {        \r\n        foldCopyright( editor );\r\n    } );\r\n\r\n    // createFileOpenWatcher();\r\n    createRsSaveWatcher();\r\n    \r\n    // subscriptions\r\n    disposables.push(languages.registerDefinitionProvider(CM_MODE, new CMDefinitionProvider()));\r\n    if ( cmConfig.cmAutoComplete80Enabled() ) {\r\n        disposables.push(languages.registerCompletionItemProvider(CM_MODE, new CM80CompletionItemProvider(), '.' ) );\r\n    }\r\n\r\n    disposables.push( languages.registerDocumentSymbolProvider(CM_MODE, new CMFileSymbolProvider() ));\r\n    // disposables.push ( languages.registerWorkspaceSymbolProvider( new CMWorkspaceSymbolProvider() ));\r\n    \r\n    // disposables.push( languages.registerCodeActionsProvider( CM_MODE, new CmCodeActionProvider() ));\r\n    disposables.push(languages.registerDocumentFormattingEditProvider(CM_MODE, new ClangDocumentFormattingEditProvider() ));\r\n    disposables.push(languages.registerHoverProvider( CM_MODE, new CMHoverProvider() ) );\r\n    disposables.push( window.registerTreeDataProvider( 'cmExplorer', new CmTreeDataProvider() ) );\r\n    disposables.push( languages.registerReferenceProvider( CM_MODE, refProvider ) );\r\n\r\n    if ( cmConfig.isDebug() ) {\r\n        // put experimental features here\r\n        // disposables.push( languages.registerSignatureHelpProvider( CM_MODE, new SignatureHelpProvider(), '(', ',' ) );\r\n    }\r\n    \r\n    disposables.push(diagnosticCollection);\r\n    disposables.push( registerCommands( compilerAdapter ) );\r\n    \r\n    context.subscriptions.push(...disposables);\r\n}\r\n\r\nfunction createWatcher( func: (e: Uri)=>void, extension: string ): void {\r\n    var dict: any[] = [];\r\n    \r\n        function addWatcher(wf: WorkspaceFolder) {\r\n            var watcher = workspace.createFileSystemWatcher( new RelativePattern(wf, `**/*.${extension}` ) );  \r\n            dict.push({key: wf.uri.fsPath, value: watcher});\r\n            watcher.onDidCreate( (e) => {\r\n                func( e );\r\n                // cmUtils.addCopyright( e );\r\n            } );\r\n        }\r\n    \r\n        workspace.workspaceFolders.forEach( wf => {\r\n           addWatcher( wf );\r\n        });\r\n    \r\n        workspace.onDidChangeWorkspaceFolders( e => {\r\n            e.added.forEach( a => {\r\n                addWatcher(a);\r\n            });\r\n            e.removed.forEach( a => {\r\n                let watcher: FileSystemWatcher = dict.find( o => o.key == a.uri.fsPath );\r\n                watcher = null;\r\n            })\r\n        } );\r\n}\r\n\r\nfunction createCmWatcher(): void {\r\n    createWatcher( cmUtils.addCopyright, \"cm\" );\r\n}\r\n\r\nfunction createRsWatcher(): void {\r\n    createWatcher( cmUtils.createResourceTemplate, \"rs\" );\r\n}\r\n\r\nfunction createRsSaveWatcher() {\r\n    if ( cmConfig.rsWatcherEnabled() ) {\r\n        workspace.onDidSaveTextDocument( (e) => {\r\n            if ( e.fileName.endsWith(\".rs\") ) {\r\n                compilerAdapter.runIfStarted( `{ cm.rs.loadRs( cm.io.Url(\"${e.fileName.replace( /\\\\/g, \"/\" )}\"), force=true ); }` );\r\n            }\r\n        });\r\n    }\r\n}", "module.exports = require(\"path\");", "module.exports = require(\"child_process\");", "'use strict'\r\n\r\nimport { CMReferenceProvider } from './cmReferenceProvider';\r\n\r\nexport let refProvider: CMReferenceProvider;\r\n\r\nexport function setup() {\r\n    refProvider = new CMReferenceProvider();\r\n}", "'use strict';\r\n\r\nimport vscode = require('vscode');\r\nimport { getCompiler } from './extension';\r\n\r\nexport class CMDefinitionProvider implements vscode.DefinitionProvider {\r\n    \r\n    /**\r\n     * 1. Split line on dots (.)\r\n     * 2. If count == 1, check for local variable with that name, DONE\r\n     * 3. Get type of first part\r\n     * - FUTURE 4. foreach item after first, find type\r\n     * 4. Call Web Service with 1st part and 2nd part\r\n     */\r\n    \r\n    private compiler = getCompiler();\r\n    \r\n    public provideDefinition( document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken ): Thenable<vscode.Location> { \r\n        \r\n        // return new Promise( (resolve, reject) => {\r\n        //     var loc = new vscode.Location(\r\n        //         vscode.Uri.file( \"c:\\\\CetDev\\\\version6.5-_build-train\\\\home\\\\cm\\\\core\\\\snapper.cm\" ),\r\n        //         // document.uri,\r\n        //         new vscode.Range( \r\n        //             new vscode.Position( 1, 0 ),\r\n        //             new vscode.Position( 1, 5 ) )\r\n        //     );\r\n        //     resolve( loc );\r\n        // });\r\n\r\n        if ( document.isDirty ) {\r\n            var file = document.fileName;\r\n\r\n            var promise = new Promise<vscode.Location>( (rsv, rj) => {\r\n                document.save()\r\n                .then( res => {\r\n                    if (res) {\r\n                        this.compiler.compileFile( file );\r\n                        setTimeout( () => {\r\n                            rsv( this.runDef( document, position ) );\r\n                        }, 250 );\r\n                    } else {\r\n                        rj(\"save failed\");      \r\n                    }\r\n                }); \r\n            });\r\n\r\n            return promise;\r\n        } else {\r\n            return this.runDef( document, position );\r\n        }\r\n    }\r\n\r\n    private runDef( document: vscode.TextDocument, position: vscode.Position ): Thenable<vscode.Location> {\r\n        var file = document.fileName;\r\n        var offset = document.offsetAt( position );\r\n        offset += 1 - position.line; // emacs is 1 based, and it treats line end as 1 character not 2\r\n        return this.compiler.goto( file, offset );\r\n    }\r\n}", "'use strict';\r\n\r\nimport { CancellationToken, CompletionItem, CompletionItemProvider, CompletionList, Position, Range, SnippetString, TextDocument, CompletionItemKind, MarkdownString } from 'vscode';\r\nimport { getCompiler } from './extension';\r\nimport { CodeStatement } from './cmCompilerAdapter';\r\nimport { cmConfig } from './cmConfig';\r\n\r\nimport fs = require('fs');\r\n\r\nexport class CM80CompletionItemProvider implements CompletionItemProvider {\r\n\r\n    private compiler = getCompiler();\r\n\r\n    constructor() { \r\n        console.log(`Starting CM8.0 Suggestion Provider...`)\r\n    }\r\n\r\n    public provideCompletionItems(document: TextDocument, position: Position, token: CancellationToken): Thenable<CompletionList> {\r\n\r\n        var p;\r\n        p = new Promise<CompletionList>( (resolve, reject) => {\r\n            \r\n            // const prevChar = document.getText( new Range( position.translate(0, -1), position  ) );\r\n\r\n            document.save()\r\n            .then( () => {\r\n\r\n                this.compiler.runStatement( {\r\n                    start: false,\r\n                    code: `cvm_ac(\\\"${document.fileName.replace( /\\\\/g, '/' )}\\\", ${this.getOffset(document, position)});`,\r\n                    successEx: /\\(load.[^\\)]*\\)/,\r\n                    failureEx: /\\(cm-ac-result-none\\)/,\r\n                    doNotClear: true\r\n                } )\r\n                .then( () => {\r\n                    console.log('CM AC Success ' + p );\r\n                    fs.readFile( cmConfig.cmRoot() + \"/write/cm-ac-candidates.el\", \"utf-8\", (err, data) => {\r\n                        if ( err ) reject();\r\n                        \r\n                        const allMatches = this.getAllMatches(data);\r\n                        var items: CompletionItem[] = [];\r\n                        \r\n                        this.getFieldCalls( allMatches, items );\r\n                        this.getClassTypes( allMatches, items );\r\n                        this.getOverrides( allMatches, items );\r\n                        \r\n                        resolve(new CompletionList( items, true ) );\r\n                    } );\r\n                }, () => {\r\n                    console.log('CM AC Failure');\r\n                    reject();\r\n                });\r\n            });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    private getOffset( document: TextDocument, position: Position ): number {\r\n        var offset = document.offsetAt( position );\r\n        offset += 1 - position.line; // emacs is 1 based, and it treats line end as 1 character not 2\r\n        return offset;\r\n    }\r\n\r\n    private getOverrides( data: string[], items: CompletionItem[] ) {\r\n        data.forEach( d => {\r\n            let match = /\\(cm-ac1\\s\"(.[^\"]*)\"\\snil\\s'\\(\\d+\\s\\.\\s\\\"(.[^\"]*)\".*\\)\\)/g.exec(d);\r\n            if ( !match ) return;\r\n\r\n            // var name = \"\";\r\n            // var index = match[1].indexOf(\"\\\"\");\r\n            // while( true ) {\r\n            //     index++;\r\n            //     let next = match[1][index]\r\n            //     if ( next == \"(\" ) break;\r\n            //     name += next;\r\n            // }\r\n\r\n            let sigMatch = /(?:^|\\\")([^\\(]+)(\\([^\\)]*\\))/g.exec( match[1] );\r\n            let retMatch = /public\\s(.*)/g.exec( match[2] );\r\n            \r\n            if ( sigMatch && retMatch ) {\r\n                var item = new CompletionItem( sigMatch[1] + sigMatch[2] + \" -> \" + retMatch[1], CompletionItemKind.Function );\r\n                item.insertText = match[2] + \" \" + \r\n                    match[1].replace( /^.*}/gm, \"}\")\r\n                            .replace( /;[\\r\\n\\s]*}/g, \";\\r\\n}\" )\r\n                            .replace( /\\s{4}super\\(\\.\\.\\)/gm, retMatch[1] == \"void\" ? \"super(..)\" : \"return super(..)\" );\r\n                // item.detail = sigMatch[1] + sigMatch[2];\r\n                var docs = new MarkdownString();\r\n                docs.appendCodeblock( sigMatch[1] + sigMatch[2], \"cm\" );\r\n                docs.appendCodeblock( \"return \" + retMatch[1], \"cm\" );\r\n                // item.documentation = \"returns \" + retMatch[1];\r\n                item.documentation = docs;\r\n                items.push( item );\r\n            }\r\n        });\r\n    }\r\n\r\n    private getClassTypes( data: string[], items: CompletionItem[] ) {\r\n        data.forEach( d => {\r\n            let match = /\\(cm-ac1\\s\"(.[^\"]*)\"\\snil\\s'[^\\(].*\\)\\)/g.exec(d);\r\n            if ( !match ) return;\r\n            var item = new CompletionItem( match[1], CompletionItemKind.Class );\r\n            item.insertText = match[1];\r\n\r\n            items.push( item );\r\n        });\r\n    }\r\n\r\n    private getFieldCalls( data: string[], items: CompletionItem[] ) {\r\n        data.forEach( d => {\r\n            let match = /\\(cm-ac1\\s\"(.[^\"]*)\"\\s\"(.[^\"]*)\"\\s\"(.[^\"]*)\"\\s\\(cons\\s\\(cm-ac-url\\s(\\d*)\\)\\s(\\d*)\\)\\)/g.exec(d);\r\n            if ( !match ) return;\r\n\r\n            var type: CompletionItemKind;\r\n            if ( match[2].startsWith( \"(\" )  ) type = CompletionItemKind.Method;\r\n            else if ( match[2].startsWith( \" -> \" ) ) type = CompletionItemKind.Property;\r\n\r\n            var item = new CompletionItem( `${match[1]}${match[2]}`, type );\r\n            var params = match[2].match( /(\\w+?\\s\\w+(?:=\\w*)?)/g );\r\n            var rtnType = /\\s->\\s(.+$)/.exec(match[2]);\r\n\r\n            if ( match[2].match( /^\\s->\\s/ ) ) {\r\n                item.insertText = match[1];\r\n            } else {\r\n                var snipStr = match[1] + \"(\";\r\n                if ( params ) {\r\n                    var count = 1;\r\n                    params.forEach(element => {\r\n                        snipStr += \" ${\" + count++ + \":\" + element + \"},\";\r\n                    });\r\n                } else {\r\n                    snipStr += \",\";\r\n                }\r\n\r\n                // item.insertText = new SnippetString( match[1] + \"( ${1:int a}, ${2:int b} )\" );\r\n                /*\r\n                console.log(\"---START---\");\r\n                console.log(snipStr);\r\n                console.log(\"---END---\")\r\n                */\r\n                var snip = snipStr.substring( 0, snipStr.length - 1 );\r\n                if ( snip.endsWith( \"(\" ) ) {\r\n                    snip += \")\";\r\n                } else {\r\n                    snip += \" )\";\r\n                }\r\n                \r\n                item.insertText = new SnippetString( snip );\r\n                var docs = new MarkdownString();\r\n                docs.appendCodeblock( item.label.replace(/\\s->\\s.*/g, \"\"), \"cm\" );\r\n                docs.appendCodeblock( \"return \" + ( rtnType ? rtnType[1] : \"void\" ), \"cm\" );\r\n                // docs.appendText(\"returns \" + ( rtnType ? rtnType[1] : \"void\" ) );\r\n                docs.appendText( \"From\");\r\n                docs.appendCodeblock( match[3] );\r\n                item.documentation = docs;\r\n                // item.detail = match[1];\r\n                // item.documentation = \"returns \" + ( rtnType ? rtnType[0] : \"void\" );\r\n            }\r\n            items.push(item);\r\n        } );\r\n    }\r\n\r\n    private getAllMatches( data : string ): string[] {\r\n        var items: string[] = [];\r\n        let regex = /\\(cm-ac1\\s(?:(?!\\)\\))(?:.|\\r|\\n))*\\)\\)/g;\r\n        var match = null;\r\n        while( match = regex.exec(data) ) {\r\n            items.push( match[0] );\r\n        }\r\n\r\n        return items;\r\n    }\r\n}", "'use strict';\r\n\r\nimport * as vscode from 'vscode';\r\nimport cp = require('child_process');\r\nimport path = require('path');\r\n\r\nexport class ClangDocumentFormattingEditProvider implements vscode.DocumentFormattingEditProvider {\r\n\tprivate formatCommand = 'clang-format';\r\n\r\n\tpublic provideDocumentFormattingEdits(document: vscode.TextDocument, options: vscode.FormattingOptions, token: vscode.CancellationToken): Thenable<vscode.TextEdit[]> {\r\n\t\treturn document.save().then(() => {\r\n\t\t\treturn this.doFormatDocument(document, options, token);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate doFormatDocument(document: vscode.TextDocument, options: vscode.FormattingOptions, token: vscode.CancellationToken): Thenable<vscode.TextEdit[]> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tvar filename = document.fileName;\r\n\r\n\t\t\t// cp.execFile(formatCommandBinPath, [filename, \"-style='{ColumnLimit: 0, IndentWidth: 4,UseTab: Never}'\"], {}, (err, stdout, stderr) => {\r\n            cp.exec(`${this.formatCommand} ${filename} -style=\"{AccessModifierOffset: 0, ColumnLimit: 0, IndentWidth: 4, ReflowComments: true, TabWidth: 4}\"`, (err, stdout, stderr) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (err && (<any>err).code == \"ENOENT\") {\r\n\t\t\t\t\t\tvscode.window.showInformationMessage(\"The '\" + this.formatCommand + \"' command is not available.  Please run \\\"npm install -g clang-format\\\".\");\r\n\t\t\t\t\t\treturn resolve(null);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (err) return reject(\"Cannot format due to syntax errors.\");\r\n\t\t\t\t\tvar text = stdout.toString();\r\n                    // fix public being pushed to the line before the signature\r\n                    text = text.replace( /(?:public|private)\\r\\n\\s*/g, \"public \" );\r\n                    // fix \"group += ? ptr\" -- should not put a space between the = and ?\r\n                    text = text.replace( /=\\s+\\?/g, \"=?\" );\r\n                    // fix dictionary casting \"str->str test = null.:str->str;\" (there shouldn't be a space after the :)\r\n                    text = text.replace( /.\\s:\\s(\\w+->\\w+)/g, '.:$1' );\r\n                    \r\n                    text = text.replace( /(\\w+)\\s{}\\s+(\\w+)/g, '$1{} $2')\r\n                    \r\n                    // trying to fix method signatures with default args\r\n                    const reg = /(?:extend)?\\s(?:public|private)\\s\\w+\\s\\w+\\((.*)\\)/g;\r\n                    \r\n                    let methodSigs = [];\r\n                                           \r\n                    var result;\r\n                    while((result = reg.exec(text)) !== null) {\r\n                        var line = result[1];\r\n                        methodSigs.push( { old: line, new: line.replace( /\\s=\\s/g, \"=\" ) } );\r\n                    }\r\n                    \r\n                    methodSigs.forEach( (item) => {\r\n                        text = text.replace( item.old, item.new );\r\n                    } );\r\n                    \r\n\t\t\t\t\t// TODO: Should use `-d` option to get a diff and then compute the\r\n\t\t\t\t\t// specific edits instead of replace whole buffer\r\n\t\t\t\t\tvar lastLine = document.lineCount;\r\n\t\t\t\t\tvar lastLineLastCol = document.lineAt(lastLine - 1).range.end.character;\r\n\t\t\t\t\tvar range = new vscode.Range(0, 0, lastLine - 1, lastLineLastCol);\r\n\t\t\t\t\treturn resolve([new vscode.TextEdit(range, text)]);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n}", "'use strict';\r\n\r\nimport { HoverProvider, Hover, TextDocument, Position, CancellationToken } from 'vscode';\r\nimport { VariableFinder } from './helpers/variableFinder';\r\n\r\n\r\nexport class CMHoverProvider implements HoverProvider {\r\n    public provideHover( document: TextDocument, position: Position, token: CancellationToken): Thenable<Hover> {\r\n        return new Promise( (resolve, reject) => {\r\n            \r\n            let wordRange = document.getWordRangeAtPosition( position );\r\n            let word = document.getText( wordRange )\r\n            \r\n            var finder = new VariableFinder();\r\n            var results = finder.findDefinitionInText( document.getText(), word );\r\n            \r\n            if( results.length > 0 ) {\r\n                let hover = new Hover( {language: 'cm', value: `${results[0].type} ${word}` } );\r\n                resolve( hover ); \r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n}", "'use strict';\r\n\r\nimport fs = require('fs');\r\n\r\nexport class VariableFindResult {\r\n    line: number;\r\n    type: string;\r\n}\r\n\r\nexport class VariableFinder {\r\n    \r\n     findDefinitionInFile( file: string, variable: string ): PromiseLike<VariableFindResult[]> {\r\n         return new Promise( (resolve, reject) => {\r\n             fs.readFile( file, \"utf-8\", (err,data) => {\r\n                var matches = this.findDefinitionInText( data, variable );\r\n                return resolve( matches );\r\n            } );\r\n         } );\r\n    }\r\n    \r\n    findDefinitionInText( content: string, variable: string ): VariableFindResult[] {\r\n        var pattern = `([\\\\w+->]+)\\\\s+(\\\\w+\\\\s*,\\\\s*)?${variable}\\\\s*(,|;|=|\\\\(\\\\))`;\r\n                \r\n        // var pattern = `^\\\\s*?(\\\\w+)\\\\s+${variable}\\\\s*?(;|=|\\\\(\\\\))`;\r\n        //var pattern = `^\\\\s*?(\\\\w+)\\\\s+(\\\\w+\\\\s*,\\\\s*)?${variable}\\\\s*(,|;|=|\\\\(\\\\))`;\r\n        try {\r\n            var regex = new RegExp( pattern, \"gmi\" );     \r\n            var match, matches: VariableFindResult[] = [];\r\n            \r\n            while ((match = regex.exec(content)) != null) {\r\n                matches.push( { line: match.index, type: match[1] } );\r\n            }\r\n            \r\n            matches.forEach( (item) => {\r\n                var split = content.substr( 0, item.line ).split(/\\r\\n|\\r|\\n/, -1);\r\n                item.line = split.length;\r\n            } );\r\n            \r\n            return matches;\r\n        } \r\n        catch (e) \r\n        {\r\n            return [];\r\n        }\r\n    }\r\n}", "import { ExtensionContext, TreeDataProvider, EventEmitter, TreeItem, Event, window, TreeItemCollapsibleState, Uri, commands, workspace, TextDocumentContentProvider, CancellationToken, ProviderResult } from 'vscode';\r\nimport { cmConfig } from './cmConfig';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\n\r\ninterface IEntry {\r\n    name: string;\r\n    type: string;\r\n}\r\n\r\nexport class CmNode {\r\n    private _resource: string;\r\n\r\n    constructor( private entry: IEntry, private rootPath: string, private _parent: string ) {\r\n        this._resource = path.join( this.rootPath, this._parent );\r\n    }\r\n\r\n    public get resource(): string {\r\n        return this._resource;\r\n    }\r\n\r\n    public get path(): string {\r\n        return path.join( this._parent, this.name );\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.entry.name;\r\n    }\r\n\r\n    public get isFolder(): boolean {\r\n        return this.entry.type === 'd' || this.entry.type === 'l';\r\n    }\r\n}\r\n\r\nexport class CmModel {\r\n\r\n    constructor( private rootPath: string ) {\r\n\r\n    }\r\n\r\n    public get roots(): Thenable<CmNode[]> {\r\n        return this.parseDirectory( path.join( this.rootPath, \"cm\" ) );\r\n    }\r\n\r\n    public getChildren( node: CmNode ): Thenable<CmNode[]> {\r\n        return this.parseDirectory( node.resource );\r\n    }\r\n\r\n    private parseDirectory( fullPath: string ): Thenable<CmNode[]> {\r\n        return new Promise( (res, rej) => {\r\n            fs.readdir( fullPath, (err, files) => {\r\n                if ( err ) {\r\n                    return rej(err);\r\n                }\r\n\r\n                let filtered = files.filter( f => fs.statSync( path.join( fullPath, f ) ).isDirectory() || f.endsWith( \".cm\" ) );\r\n                \r\n                return res( this.sort( filtered.map( \r\n                    entry => new CmNode( { name: entry, type: fs.statSync( path.join( fullPath, entry ) ).isDirectory() ? 'd' : 'cm' }, fullPath, entry ) \r\n                ) ) );\r\n            } )\r\n        } );\r\n    }\r\n\r\n    private sort( nodes: CmNode[] ): CmNode[] {\r\n        return nodes.sort( (n1, n2) => {\r\n            if ( n1.isFolder && !n2.isFolder ) {\r\n                return -1;\r\n            }\r\n\r\n            if ( !n1.isFolder && n2.isFolder ) {\r\n                return 1;\r\n            }\r\n\r\n            return n1.name.localeCompare( n2.name );\r\n        })\r\n    }\r\n}\r\n\r\nexport class CmTreeDataProvider implements TreeDataProvider<CmNode> {\r\n\r\n    private _onDidChangeTreeData: EventEmitter<any> = new EventEmitter<any>();\r\n    readonly onDidChangeTreeData: Event<any> = this._onDidChangeTreeData.event;\r\n\r\n    private model: CmModel;\r\n\r\n    public getTreeItem( element: CmNode ): TreeItem {\r\n        return {\r\n            label: element.name,\r\n            collapsibleState: element.isFolder ? TreeItemCollapsibleState.Collapsed : void 0,\r\n            command: element.isFolder ? void 0 : {\r\n                command: 'extension.openFile',\r\n                arguments: [element.resource],\r\n                title: 'Open CM Resource'\r\n            },\r\n            iconPath: {\r\n                light: element.isFolder ? path.join( __filename, '..', '..', '..', 'resources', 'light', 'dependency.svg' ) : path.join(__filename, '..', '..', '..', 'resources', 'cmIcon.png'),\r\n                dark: element.isFolder ? path.join(__filename, '..', '..', '..', 'resources', 'dark', 'dependency.svg') : path.join(__filename, '..', '..', '..', 'resources', 'cmIcon.png')\r\n            }\r\n        };\r\n    }\r\n\r\n    public getChildren( element?: CmNode ): CmNode[] | Thenable<CmNode[]> {\r\n        if ( !element ) {\r\n            if ( !this.model ) {\r\n                this.model = new CmModel( cmConfig.cmPath() );\r\n            }\r\n            return this.model.roots;\r\n        }\r\n\r\n        return this.model.getChildren( element );\r\n    }\r\n}", "'use strict';\r\n\r\nimport * as vscode from 'vscode';\r\n\r\nconst path = require(\"path\");\r\n\r\nimport {TextDocument, CancellationToken, ProviderResult} from 'vscode';\r\n\r\nexport class CMFileSymbolProvider implements vscode.DocumentSymbolProvider {\r\n    public provideDocumentSymbols(document: vscode.TextDocument, token: CancellationToken): ProviderResult<vscode.SymbolInformation[]> {\r\n        let symbols: vscode.SymbolInformation[] = [];\r\n\r\n        const searches = [\r\n            { regex: /\\b(?:public|package|private)\\s+class\\s+([a-zA-Z][_a-zA-Z0-9]*)/g, kind: vscode.SymbolKind.Class },\r\n            { regex: /(?:extend\\s+)?(?:public|package|private)\\s+([a-zA-Z<](?:[_\\-\\>,\\sa-zA-Z0-9]|\\{\\}|\\[\\])*)\\s+([a-zA-Z<][_>,\\sa-zA-Z0-9]*)\\s*\\((.*)(?=\\)\\s*\\{.*)/g, kind: vscode.SymbolKind.Method },\r\n            { regex: /(?:public|package|private)\\s+([a-zA-Z<](?:[_\\-\\>,\\sa-zA-Z0-9]|\\{\\}|\\[\\])*)\\s+([a-zA-Z][_a-zA-Z0-9]*)[^{]*?(?=;)/g, kind: vscode.SymbolKind.Property }\r\n        ];\r\n\r\n        searches.forEach( s => {\r\n            const txt = document.getText();\r\n            var match: RegExpExecArray;\r\n            while( ( match = s.regex.exec(txt) ) !== null ) {\r\n                // symbols.push( new vscode.SymbolInformation(\r\n                //         this.getNameFromKind( match, s.kind ),\r\n                //         s.kind,\r\n                //         document.fileName,\r\n                //         new vscode.Location(\r\n                //             document.uri,\r\n                //             document.positionAt( match.index )\r\n                //         )\r\n                //     )\r\n                // );\r\n                // constructor(name: string, detail: string, kind: SymbolKind, range: Range, selectionRange: Range);\r\n                var pos = document.positionAt( match.index );\r\n                symbols.push( \r\n                    new vscode.SymbolInformation(\r\n                        this.getNameFromKind( match, s.kind ),\r\n                        s.kind,\r\n                        \"\",\r\n                        new vscode.Location( document.uri, pos )\r\n                    )\r\n                );\r\n            } \r\n        });\r\n\r\n        return Promise.resolve(symbols);\r\n    }\r\n\r\n    private getNameFromKind( match: RegExpExecArray, kind: vscode.SymbolKind ): string {\r\n        if ( kind == vscode.SymbolKind.Class ) {\r\n            return match[1];\r\n        } else if ( kind == vscode.SymbolKind.Method ) {\r\n            return `${match[2]}(${match[3]}) : ${match[1]}`;\r\n        } else if ( kind == vscode.SymbolKind.Property ) {\r\n            return `${match[2]} : ${match[1]}`;\r\n        }\r\n    }\r\n/*\r\n    public resolveWorkspaceSymbol(symbol: SymbolInformation, token: CancellationToken): ProviderResult {\r\n\r\n    }\r\n    */\r\n}", "'use strict';\r\n\r\nimport vscode = require('vscode');\r\n\r\nexport const CM_MODE: vscode.DocumentFilter = { language: 'cm', scheme: 'file' }", "'use strict';\r\n\r\nimport { window } from 'vscode';\r\n\r\nexport const showReloadConfirm = (msg): Promise<boolean> => {\r\n    return new Promise( (res, rej) => {\r\n        window.showInformationMessage( msg, \"Reload\" )\r\n        .then( value => {\r\n            if ( value == \"Reload\" ) {\r\n                res(true);\r\n            } else {\r\n                res(false);\r\n            }\r\n        });\r\n    });\r\n}", "'use strict';\r\n\r\nimport { cmConfig } from './cmConfig';\r\nimport { cmOutputChannel } from './cmOutputChannel';\r\nimport vscode = require('vscode');\r\nimport { workspace } from 'vscode';\r\n\r\nvar compilerContainer = require(\"node-cm/index.js\");\r\n\r\nexport class cmCompilerAdapter {\r\n    \r\n    private channel: cmOutputChannel;\r\n    private filePath: string;\r\n    private compiler;\r\n    private isStarted: boolean = false;\r\n    private diagnostics: vscode.DiagnosticCollection;\r\n    \r\n    constructor( diagnostics: vscode.DiagnosticCollection, filePath: string ) {\r\n        this.filePath = filePath;\r\n        this.channel = new cmOutputChannel( diagnostics, filePath );\r\n        this.diagnostics = diagnostics;\r\n        \r\n        this.compiler = new compilerContainer( {\r\n            cmRoot: cmConfig.cmRoot(),\r\n            gitMode: cmConfig.cmGitMode(),\r\n            onRead: (data) => {\r\n                this.channel.write( data );\r\n            },\r\n            onError: (data) => {\r\n                vscode.window.showInformationMessage( \"Error from CM Process\" );\r\n                this.channel.write( `[INFO: CM_Process_Error -> ${data}]` );\r\n            },\r\n            //debug: true,\r\n            \"cmArch\": cmConfig.arch()\r\n        });\r\n    }\r\n\r\n    public reset() {\r\n        this.compiler.kill();\r\n\r\n        this.compiler = new compilerContainer( {\r\n            cmRoot: cmConfig.cmRoot(),\r\n            onRead: (data) => {\r\n                this.channel.write( data );\r\n            },\r\n            onError: (data) => {\r\n                vscode.window.showInformationMessage( \"Error from CM Process\" );\r\n                this.channel.write( `[INFO: CM_Process_Error -> ${data}]` );\r\n            },\r\n            //debug: true,\r\n            \"cmArch\": cmConfig.arch()\r\n        });\r\n        this.clearOutputIfNeeded();\r\n        this.isStarted = false;\r\n        return this.start();\r\n    }\r\n    \r\n    public startWritingOutputFile() : void {\r\n        this.channel.write( `[Contents of output channel will now be written to: ${this.filePath}]\\n` );\r\n        this.channel.writeOutputToFile = true;\r\n    }\r\n    \r\n    public stopWritingOutputFile() : void {\r\n        this.channel.writeOutputToFile = false;\r\n        this.channel.write( \"[Stopped writing output to file]\\n\" );\r\n    }\r\n    \r\n    public start() : Thenable<boolean> {\r\n        if ( this.isStarted ) return;\r\n        \r\n        return new Promise((resolve, reject) => {\r\n            this.compiler.start()\r\n            .then( (success) => {\r\n                this.isStarted = success;\r\n                resolve(success);  \r\n            }, reject);\r\n        });        \r\n    }\r\n    \r\n    public clean() {\r\n        // this.clearOutputIfNeeded();\r\n        this.channel.clear();\r\n        this.channel.write(\"Starting Clean...\\n\", true);\r\n        var results = this.compiler.clean();\r\n        this.channel.write( \"[INFO make clean-cm:]\\n\", true );\r\n        this.channel.write( \"---------------------\\n\", true );\r\n        this.channel.write( results, true );\r\n        this.channel.write( \"---------------------\\n\", true );\r\n        this.channel.write( \"[INFO CM Clean]\\n\", true );\r\n        this.isStarted = false;\r\n    }\r\n    \r\n    public stop() {\r\n        if ( !this.isStarted ) return;\r\n        this.clearOutputIfNeeded();\r\n        this.channel.write( \"[INFO CM Killed]\\n\", true );\r\n        this.compiler.kill();\r\n        this.isStarted = false;\r\n    }\r\n    \r\n    public loadAllKnown( file: string ) {\r\n        this.diagnostics.clear();\r\n        this.startIfNotStarted().then( (succuess) => {\r\n        //    this.compiler.write( \"use cm.rs; updateParsedRs();\" );\r\n            console.log(file);\r\n            this.compiler.write(`loadAll(\"${file.replace(/\\\\/g, \"/\")}\");`);\r\n        });\r\n    }\r\n\r\n    public compileWorkspace() {\r\n        this.startIfNotStarted().then( (succuess) => {\r\n            cmConfig.currentWorkspace()\r\n            .then( path => {\r\n                path = path.replace( /\\\\/g, \"/\" ) + \"/\";\r\n                this.run( `{ use cm.runtime.util; compileAllBelow(CompileAllEnv(\"${path}\")); }` );\r\n            })\r\n            // const path = cmConfig.currentWorkspace()\r\n            \r\n        } );\r\n    }\r\n\r\n    public compileVSWorkspace() {\r\n        this.startIfNotStarted().then( (succuess) => {\r\n            var command = \"\";\r\n            workspace.workspaceFolders.forEach( wf => {\r\n                let path = wf.uri.fsPath.replace( /\\\\/g, \"/\" ) + \"/\";\r\n                command += `compileAllBelow(CompileAllEnv(\"${path}\"));`;\r\n            });\r\n            this.run( `{ use cm.runtime.util; ${command} }` );\r\n        } );\r\n    }\r\n    \r\n    public compileFile( file: string ) {\r\n        this.clearOutputIfNeeded();\r\n        this.diagnostics.clear();\r\n        this.startIfNotStarted().then((success) => {\r\n            this.compiler.compileFile( file );\r\n        });    \r\n    }\r\n\r\n    public runStatement( statement: CodeStatement ): Thenable<boolean> {\r\n        if ( !statement.start && !this.isStarted ) return;\r\n        this.clearOutputIfNeeded( statement.doNotClear );\r\n        return this.startIfNotStarted()\r\n        .then( (success) => {\r\n            var promise = new Promise<boolean>( (res, rej) => { \r\n                this.channel.addOutputWatch( \r\n                    res, \r\n                    rej, \r\n                    statement.successEx,\r\n                    statement.failureEx );\r\n                this.compiler.write( statement.code );\r\n                setTimeout( () => {\r\n                    this.channel.clearOutputWatch();\r\n                }, 2000 ); // give CM 2 seconds to respond \r\n            });\r\n            \r\n            return promise;\r\n        });\r\n    }\r\n    \r\n    public runIfStarted( cmCode: string ) {\r\n        this.clearOutputIfNeeded();\r\n        this.diagnostics.clear();\r\n        if ( this.isStarted ) {\r\n            this.compiler.write( cmCode );\r\n        }\r\n    }\r\n\r\n    public run( cmCode: string ) {\r\n        this.clearOutputIfNeeded();\r\n        this.diagnostics.clear();\r\n        this.startIfNotStarted().then((success) => {\r\n            this.compiler.write( cmCode );\r\n        });\r\n    }\r\n    \r\n    public runCurrentFile( file: string ) {\r\n        if ( !file.endsWith(\"acloader.cm\") ) this.clearOutputIfNeeded();\r\n        this.diagnostics.clear();\r\n        this.startIfNotStarted().then((success) => {\r\n            this.compiler.runFile( file );\r\n        });\r\n    }\r\n    \r\n    public quitDebug() {\r\n        if(!this.isStarted) return;\r\n        \r\n        this.compiler.quitDebug();\r\n    }\r\n    \r\n    public goto( file: string, offset: number ): Thenable<vscode.Location> {\r\n        return this.startIfNotStarted()\r\n        .then( (success) => {\r\n            var promise = this.channel.goToDefinitionPromise();\r\n            file = file.replace( /\\\\/g, '/' ); // make sure we have the right slashses        \r\n            this.compiler.write( `cm.runtime.refers(\"${file}\", ${offset});` );\r\n            return promise;    \r\n        });\r\n\r\n    }\r\n    \r\n    private startIfNotStarted() : Thenable<boolean> {\r\n        if(this.isStarted) \r\n            return new Promise((resolve, reject) => { resolve(true); });\r\n        \r\n        return this.start();\r\n    }\r\n\r\n    private clearOutputIfNeeded( skip = false ) {\r\n        if ( skip ) return;\r\n        if ( cmConfig.clearOutputOnBuild() ) {\r\n            this.channel.clear();\r\n        }\r\n    }\r\n}\r\n\r\nexport interface CodeStatement {\r\n    // should start compiler if not started\r\n    start: boolean; \r\n    // code to execute\r\n    code: string;\r\n    // regex to match for \"success\"\r\n    successEx: RegExp;\r\n    // regex to match for \"failure\"\r\n    failureEx: RegExp;\r\n    // should clear output\r\n    doNotClear: boolean;\r\n}", "'use strict';\r\n\r\nimport vscode = require('vscode');\r\n\r\nimport { refProvider } from './cmGlobals';\r\n\r\nimport fs = require('fs');\r\n\r\nexport class cmOutputChannel {\r\n    \r\n    private output: vscode.OutputChannel;\r\n    private hashOutput: vscode.OutputChannel;\r\n    private isResolving = false;\r\n    private goToPromise: Thenable<vscode.Location>;\r\n    public goToResolver: (value?: {} | vscode.Location | PromiseLike<{}>) => void;\r\n    private goToRejector: (value?: {} | PromiseLike<{}>) => void;\r\n    \r\n    private diagnostics: vscode.DiagnosticCollection;\r\n    \r\n    public writeOutputToFile: boolean;\r\n    private filePath: string;\r\n\r\n    private watchResolve: (value?: {} | PromiseLike<{}>) => void;\r\n    private watchReject: (value?: {} | PromiseLike<{}>) => void;\r\n    private watchSuccess: RegExp;\r\n    private watchFail: RegExp;\r\n\r\n    private partial = '';\r\n\r\n    private parsers: LineParser[];\r\n    private activeParsers: LineParser[];\r\n    \r\n    constructor( diags: vscode.DiagnosticCollection, filePath: string ) { \r\n        this.filePath = filePath;\r\n        this.output = vscode.window.createOutputChannel( 'CM' );\r\n        this.hashOutput = vscode.window.createOutputChannel( 'CM - #' );\r\n        this.diagnostics = diags;\r\n        this.parsers = [];\r\n        this.parsers.push( new FindReferencesParser(this) );\r\n\r\n        this.activeParsers = [];\r\n    }\r\n    \r\n    public clear() {\r\n        this.output.clear();\r\n    }\r\n    \r\n    public write( data: string, force: boolean=false ) {\r\n        //This doesn't wait for the callback response because we really don't need to wait for it\r\n        //Its just used when CM is crashing really hard and you need to see the output in a file because VS Code crashed\r\n        //This will write the output into a file so you can review it\r\n        // if(this.writeOutputToFile) {\r\n        //     fs.appendFile(this.filePath, data, null);\r\n        // }\r\n\r\n        if ( force ) {\r\n            if ( this.partial.length > 0 ) this.output.appendLine( this.partial );\r\n            this.output.append(data);\r\n            return;\r\n        }\r\n\r\n        if ( this.partial.length > 0 ) {\r\n            // console.log('appending partial');\r\n            data = this.partial + data;\r\n            this.partial = '';\r\n        }\r\n        var lineResults = this.lineParser( data );\r\n\r\n        // if ( lineResults.newLines.length > 0 ) {\r\n            this.output.append( lineResults.newLines );\r\n        // }\r\n        // this.output.append( data );\r\n        // this.output.append(data.replace(/[\\x01\\x02]/g, \"\\r\\n\"));\r\n        // if ( lineResults.hashLines.length > 0 ) {\r\n        //     this.hashOutput.append( lineResults.hashLines );\r\n        // }\r\n        \r\n    }\r\n\r\n    public goToDefinitionPromise() {\r\n        if ( !this.goToPromise ) {\r\n            this.goToPromise = new Promise( (resolve, reject) => {\r\n                this.isResolving = false;\r\n                this.goToResolver = resolve;\r\n                this.goToRejector = reject;\r\n            });\r\n        }\r\n        \r\n        return this.goToPromise\r\n        .then( (loc) => {\r\n            this.goToPromise = null;\r\n            return loc;\r\n        }, (error) => {\r\n            this.goToPromise = null;\r\n            throw error;\r\n        } ); \r\n    }\r\n\r\n    public lineParser( data ) {\r\n        let rawData =  data.replace(/[\\x01\\x02]/g, \"\\r\\n\");\r\n        let hasNewLine = data.indexOf('\\r\\n') > -1;\r\n        if ( !hasNewLine && rawData.indexOf( \"cm>\" ) == -1 ) {\r\n            // console.log(\"partial found\");\r\n            this.partial = rawData;\r\n            return { newLines: '' }\r\n        }\r\n        var lines = rawData.split(/\\r\\n/g);\r\n        var newLines = [];\r\n        var hashLines = [];\r\n        const errorRegex = /([cC]:.*\\.cm)\\((\\d+)\\,\\s{1}(\\d+)\\):(.*)/gm; \r\n        const gotoRegex = /\\(cm-goto-def \"(.[^\"]+)\"\\s(\\d+)/;\r\n        const debugRegex = /^cm\\sD>\\s*?$/;\r\n        // var noise = /(.*)#custom\\.qaTools(.*)/;\r\n        const nextErrorRegex = /\\(next-error\\).cm>\\s*/;\r\n        const cetAltClickRegex = /'\\(cm-show-file-at-pos-selected-window\\s\"(.*)\"\\s(\\d+)\\)\\)/;\r\n        // let plnHashRegex = /^[A-Za-z0-9]*=.*$/;\r\n        const cmACRegex = /^tt$|\\(load\\s\".*\"\\s.*\\)|\\(cm-ac-result-none\\)/;\r\n        const cmPrompt = /cm>/;\r\n\r\n        var invokeDate = Date.now();\r\n\r\n        lines.forEach(element => {\r\n            // check new line parsers\r\n            let blocked = false;\r\n\r\n            for (let aParse of this.parsers) {\r\n                element = aParse.parse( element );\r\n                if ( aParse.isActive && aParse.exclusive ) {\r\n                    let diff =  invokeDate - aParse.started;\r\n                    if ( diff < 10000 ) {\r\n                        blocked = true;\r\n                        break;\r\n                    } else {\r\n                        // its been more then 10 seconds...your time is done\r\n                        aParse.isActive = false;\r\n                        \r\n                        // temp fix\r\n                        if ( this.goToRejector ) this.goToRejector();\r\n\r\n                        aParse.complete();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if( !blocked ) {\r\n                var errorMatch = errorRegex.exec(element);\r\n                var cetAltClickMatch = cetAltClickRegex.exec( element );\r\n                var nextErrorMatch = nextErrorRegex.exec( element );\r\n                \r\n                // if ( plnHashRegex.test(element) ) {\r\n                //     hashLines.push( element );\r\n                // } \r\n\r\n                // if ( noise.test(element ) || element.indexOf('#custom.qaTools') > -1 ) {\r\n                    // get rid of this crap from output\r\n                    // return;\r\n                // } else \r\n                // don't reject if its in process of doing it\r\n                if ( cmPrompt.test(element ) && this.goToPromise && !this.isResolving ) {\r\n                    this.goToRejector();\r\n                    this.goToPromise = null;\r\n                    // return;\r\n                } else if ( cetAltClickMatch ) {    \r\n                    this.goToFileLocation( cetAltClickMatch[1], parseInt(cetAltClickMatch[2]) );\r\n                } else if ( gotoRegex.test( element ) ) {\r\n                    var match = gotoRegex.exec( element );\r\n                    var file = match[1];\r\n                    var offset = parseInt( match[2] );\r\n                    this.isResolving = true;\r\n\r\n                    vscode.workspace.openTextDocument( file )\r\n                    .then( (doc) => {\r\n                        var position = doc.positionAt( offset );\r\n                        position = doc.positionAt( offset + position.line );\r\n\r\n                        if ( this.goToPromise && this.goToResolver ) {\r\n                            this.goToResolver( new vscode.Location( vscode.Uri.file( file ), position ) );\r\n                        } else {\r\n                            console.log( 'no promise for go to def' );\r\n                            // vscode.window.showTextDocument( doc ).then( (res) => {\r\n                            //     res.selection = new vscode.Selection( position, position );\r\n                            //     res.revealRange( new vscode.Range( position, position ), vscode.TextEditorRevealType.InCenter );\r\n                            // });\r\n                        }\r\n                    });\r\n                    return;\r\n                } else if ( errorMatch ) {\r\n                    if ( !errorMatch[4].match( /\\simplements\\s\\w*$/ )) { // for some reason the implements call outputs this like an error\r\n                        // this.setDiagnostics( errorMatch[1], parseInt( errorMatch[2] ), parseInt( errorMatch[3] ), errorMatch[4] );\r\n                        var severity = vscode.DiagnosticSeverity.Error;\r\n                        if ( /found\\sno\\suses\\sof/.test(element) ) {\r\n                            severity = vscode.DiagnosticSeverity.Warning;\r\n                        }\r\n                        this.setDiagnostics( errorMatch[1], +errorMatch[2], +errorMatch[3], errorMatch[4], severity );\r\n                        element = `${severity == vscode.DiagnosticSeverity.Warning ? \"WARNING\" : \"ERROR\"} ` + errorMatch[1] + ':' + errorMatch[2] + ':' + errorMatch[3] + ' - ' + errorMatch[4];\r\n                    }                             \r\n                // } else if ( debugRegex.test( element) ) {\r\n                    // element = '[DEBUG ' + element + ']';\r\n                } else if ( nextErrorMatch && !this.isResolving ) {\r\n                    // setTimeout( () => {\r\n                        if ( this.goToPromise && this.goToRejector ) {\r\n                            this.goToRejector();\r\n                        }\r\n                    // }, 500 );\r\n                } else if ( this.watchSuccess != null ) {\r\n                    if ( this.watchSuccess.test( element ) ) {\r\n                        this.watchResolve();\r\n                        this.clearOutputWatch();\r\n                    } else if ( this.watchFail.test ( element ) )  {\r\n                        this.watchReject();\r\n                        this.clearOutputWatch();\r\n                    }\r\n                }\r\n\r\n                if ( cmACRegex.test( element ) ) {\r\n                    // return;\r\n                }\r\n            }\r\n            \r\n            if ( element != null ) {\r\n                newLines.push( element.replace( /\\x01/g, \"\" ).replace( /\\x02/g, \"\" ) );\r\n            }\r\n        });\r\n        \r\n        // if ( hashLines.length == 1 ) {\r\n        //     hashLines[0] += '\\r\\n';\r\n        // }\r\n\r\n        if ( newLines.length == 1 ) {\r\n            // newLines[0] += '\\r\\n';\r\n        }\r\n\r\n        return {\r\n            newLines: newLines.join('\\r\\n'),\r\n            hashLines: hashLines.join('\\r\\n')\r\n        };\r\n    }\r\n    \r\n    public addOutputWatch( res: (value?: {} | PromiseLike<{}>) => void, rej: (value?: {} | PromiseLike<{}>) => void, success: RegExp, fail: RegExp ) {\r\n        this.watchResolve = res;\r\n        this.watchReject = rej;\r\n        this.watchSuccess = success;\r\n        this.watchFail = fail;\r\n    }\r\n\r\n    public clearOutputWatch() {\r\n        this.watchResolve = null;\r\n        this.watchReject = null;\r\n        this.watchSuccess = null;\r\n        this.watchFail = null;\r\n    }\r\n\r\n    private goToFileLocation( file:string, offset: number ) {\r\n        vscode.workspace.openTextDocument( file )\r\n            .then( (doc) => {\r\n                var position = doc.positionAt( offset );\r\n                position = doc.positionAt( offset + position.line );\r\n                \r\n                vscode.window.showTextDocument( doc )\r\n                    .then( editor => {\r\n                        editor.revealRange( new vscode.Range( position, position ), vscode.TextEditorRevealType.InCenter ); \r\n                    });\r\n            } );\r\n    }\r\n    \r\n    private setDiagnostics( file: string, line: number, column: number, desc: string, level: vscode.DiagnosticSeverity ) {\r\n        vscode.workspace.openTextDocument( file )\r\n            .then( (doc) => {\r\n                var textLine: vscode.TextLine = doc.lineAt( line - 1 );\r\n                var diag = new vscode.Diagnostic( textLine.range, desc, level );\r\n                this.diagnostics.set( vscode.Uri.file( file ), [diag] )        \r\n            });\r\n    }\r\n}\r\n\r\ninterface LineParser {\r\n    isActive: boolean;\r\n    exclusive: boolean;\r\n    started: number;\r\n    parse(line: string): string; // if active, parse it\r\n    complete();\r\n}\r\n\r\nconst srcMatch = /([cC]:.*\\.cm)\\((\\d+),\\s(\\d+)\\)(.*)/g;\r\n\r\nclass SrcRefParser implements LineParser {\r\n    isActive = false;    \r\n    exclusive = false;\r\n    started = null;\r\n\r\n    public parse( line: string ): string {\r\n        let lineM = srcMatch.exec( line );\r\n        if ( lineM ) {\r\n            // probably add to the find all referenc cache\r\n            this.didMatch( lineM[1], +lineM[2], +lineM[3], lineM[4] );\r\n            return lineM[1]+\"(\"+lineM[2]+\",\"+lineM[3]+\"): \"+lineM[4];\r\n        }\r\n        return line;\r\n    }\r\n\r\n    public complete() {}\r\n\r\n    public didMatch( file: string, line: number, column: number, rest: string ) {}\r\n}\r\n\r\nclass FindReferencesParser extends SrcRefParser {\r\n    exclusive = true;\r\n    private channel: cmOutputChannel;\r\n\r\n    private readonly startR = /\\(cm-push-def\\s\"[^\"]*\"\\s\\d+\\)/g;\r\n    private readonly endR = /\\(cm-next-error\\)/g;\r\n\r\n    constructor( c: cmOutputChannel ) {\r\n        super();\r\n        this.channel = c;\r\n    }\r\n    \r\n    public parse( line: string ): string {\r\n        if ( !this.isActive ) {\r\n            // see if it should activate\r\n            let match = this.startR.exec(line);\r\n            if ( match ) {\r\n                this.isActive = true;\r\n                this.started = Date.now();\r\n                return \"Found References:\";\r\n            }\r\n            return line;\r\n        } else {\r\n            let end = this.endR.exec(line);\r\n            if ( end ) {\r\n                this.isActive = false;\r\n                this.complete();\r\n                return null;\r\n            }\r\n            // parse the line\r\n            return super.parse(line);\r\n        }\r\n    }\r\n\r\n    public complete() {\r\n        let gotoRes = this.channel.goToResolver;\r\n        let first = refProvider.first();\r\n        if ( gotoRes != null && first != null ) {\r\n            // we need to clear the cache so if we get the Find All Ref's result again for\r\n            // a go to def, we don't want to keep sending the same result\r\n            refProvider.clearCache();\r\n            gotoRes( first );\r\n        } else {\r\n            refProvider.complete();\r\n        }\r\n    }\r\n\r\n    public didMatch( file: string, line: number, column: number, rest: string ) {\r\n        // eventually add to somethign like find all ref cache\r\n        refProvider.addReference( file, line, column );\r\n    }\r\n}", "'use strict';\r\n\r\nimport {\r\n    CancellationToken,\r\n    Location,\r\n    Position,\r\n    ProviderResult,\r\n    ReferenceContext,\r\n    ReferenceProvider,\r\n    TextDocument,\r\n    Uri,\r\n    Range\r\n} from 'vscode';\r\n\r\n\r\nimport { getCompiler } from './extension';\r\n\r\nexport class CMReferenceProvider implements ReferenceProvider {\r\n\r\n    private cache: Location[];\r\n    private pRes;\r\n    private pRej;\r\n\r\n    private compiler = getCompiler();\r\n\r\n    provideReferences(document: TextDocument, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]> {\r\n        this.abort();\r\n        return new Promise( (res, rej ) => {\r\n            this.pRes = res;\r\n            this.pRej = rej;\r\n\r\n            // actually invoke thie thing\r\n            return this.findReferences(document, position);\r\n        });\r\n    }\r\n\r\n    complete() {\r\n        if ( this.pRes ) this.pRes( this.cache );\r\n        this.pRes = null;\r\n        this.pRej = null;\r\n    }\r\n\r\n    abort() {\r\n        if ( this.pRej ) this.pRej();\r\n        this.clearCache();\r\n        this.pRes = null;\r\n        this.pRej = null;\r\n    }\r\n\r\n    first() : Location {\r\n        return ( this.cache.length > 0 ? this.cache[0] : null);\r\n    }\r\n\r\n    addReference( file: string, line: number, column: number ) {\r\n        let uri = Uri.file(file);\r\n        let startPos = new Position( line-1, 0 );\r\n        let endPos = new Position( line-1, column );\r\n        if( !this.cache ) this.cache = [];\r\n        this.cache.push( new Location( uri, new Range(startPos, endPos ) ) );\r\n    }\r\n\r\n    clearCache() {\r\n        this.cache = [];\r\n    }\r\n\r\n    private findReferences( document: TextDocument, position: Position ) {\r\n        var file = document.fileName;\r\n        var offset = document.offsetAt( position );\r\n        offset += 1 - position.line; // emacs is 1 based, and it treats line end as 1 character not 2\r\n        file = file.replace( /\\\\/g, '/' );\r\n        return this.compiler.run( `cm.runtime.refers(\"${file}\", ${offset});` );\r\n        // return this.compiler.goto( file, offset );\r\n    }\r\n}", "var proc = require(\"child_process\");\r\n\r\nmodule.exports = function (options) {\r\n    var self = this,\r\n        _cm = null,\r\n        _options = options,\r\n        _onRead = _options && _options.onRead || null,\r\n        _onError = _options && _options.onError || null,\r\n        _onExit = _options && _options.onExit || null,\r\n        CM_ROOT = _options && _options.cmRoot || \"C:\\\\CetDev\\\\version6.5\",\r\n        CM_HOME = _options && _options.gitMode ? CM_ROOT + \"\\\\base\" : CM_ROOT + \"\\\\home\";\r\n        // CM_WRITE = CM_ROOT + \"\\\\write\",\r\n\r\n    this.start = function (options) {\r\n        return new Promise(function (resolve, reject) {\r\n            var args = [\"/nocoloring\"];\r\n            if (options && options.clean) {\r\n                args.push(\"/clean\");\r\n            }\r\n            // _cm = proc.spawn(\"c:\\\\CetDev\\\\version10.0\\\\setenv.cmd && \" + _cmExecutable , args, {shell:true});\r\n            if ( CM_ROOT.indexOf('9.5') > -1 ) {\r\n                args = [CM_ROOT];\r\n                _cm = proc.spawn(__dirname + \"\\\\cmstartdev.cmd\", args);\r\n            } else {\r\n                _cm = proc.spawn(CM_HOME+\"\\\\bin\\\\cmstartdev.cmd\", args);\r\n            }            \r\n\t\t\t\r\n            _cm.stdout.on(\"data\", function (data) {\r\n                data = data.toString();\r\n\r\n                if (_onRead) {\r\n                    _onRead(data);\r\n                }\r\n\r\n                if (_isCompilerReady(data)) {\r\n                    resolve(true);\r\n                }\r\n            });\r\n\r\n            _cm.stderr.on(\"data\", function (data) {\r\n                data = data.toString();\r\n                // they have an echo that gets mad\r\n                if ( !_onError ) throw new Error(data);\r\n                // if (_onError)\r\n\r\n                //     _onError(data);\r\n                // else\r\n                //     throw new Error(data);\r\n            });\r\n\t\t\t\r\n\t\t\t_cm.on(\"error\", function (error) {\r\n                console.log(\"HELP\");\r\n\t\t\t\tconsole.log(error);\r\n            });\r\n\r\n            _cm.on(\"exit\", function (code) {\r\n\t\t\t\tconsole.log(code);\r\n                if (_onExit)\r\n                    _onExit(code);\r\n            });\r\n        });\r\n    };\r\n\r\n    this.write = function (data) {\r\n        var cmd = _makeCommand(data);\r\n\r\n        if (_options && _options.debug)\r\n            console.log(data);\r\n\r\n        _cm.stdin.write(cmd);\r\n    };\r\n\r\n    this.clean = function () {\r\n        self.kill();\r\n        // var r = proc.execSync(\"make --jobs -C \\\"\" + CM_HOME + \"\\\" \\\"clean-cm\\\"\");\r\n        var r = proc.execSync(CM_HOME+\"\\\\bin\\\\cmstarttestclean.cmd\");\r\n        return r.toString();\r\n    };\r\n\r\n    this.runFile = function (file) {\r\n        file = file.replace(/\\\\/g, \"/\");\r\n        var cmd = \"run(\\\"\" + file + \"\\\");\";\r\n        self.write(cmd);\r\n    };\r\n\r\n    this.compileFile = function (file) {\r\n        file = file.replace(/\\\\/g, \"/\");\r\n        var cmd = \"load(\\\"\" + file + \"\\\");\";\r\n        self.write(cmd);\r\n    };\r\n\r\n    this.quitDebug = function () {\r\n        var cmd = \"quit();\";\r\n        self.write(cmd);\r\n    };\r\n\r\n    this.kill = function () {\r\n        console.log(\"Killing pending processes\");\r\n        var code = proc.execSync(CM_HOME + \"\\\\bin\\\\cm_pskill /name \\\"_cm.exe\\\" /beginsWith \\\"msdev\\\" /beginsWith \\\"link\\\" /titleBeginsWith \\\"Microsoft Visual\\\"\");\r\n        console.log(\"All processes killed\");\r\n    };\r\n\r\n    function _makeCommand(data) {\r\n        return data + \"\\x01\";\r\n    }\r\n\r\n    function _isCompilerReady(data) {\r\n        return data.match(/cm>\\s*$/g);\r\n    }\r\n}\r\n", "'use strict';\r\n\r\nimport vscode = require('vscode');\r\nimport { Uri } from 'vscode';\r\nvar fs = require('fs'),\r\n    path = require('path');\r\n\r\nexport interface CurrentSymbol {\r\n    varName: string;\r\n    memberName?: string;\r\n}\r\n\r\nexport class cmUtils {\r\n\r\n    static packageFileUsings(): string[] {\r\n        let folder = vscode.window.activeTextEditor.document.uri.fsPath;\r\n        folder = folder.substring( 0, folder.lastIndexOf('\\\\') );\r\n        let fullPath = path.join(folder, \"package.cm\");\r\n\r\n        if ( fs.existsSync( fullPath ) ) {\r\n            var contents = fs.readFileSync(fullPath, 'utf8');\r\n            var lines = contents.split('\\r\\n');\r\n            var usings: string[] = [];\r\n\r\n            lines.forEach((l) => {\r\n                if (l == \"\") return;\r\n                let match = /^\\s*?use\\s+(.*);$/.exec(l);\r\n\r\n                if (match) {\r\n                    usings.push(match[1]);\r\n                }\r\n            });\r\n\r\n            return usings;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Gets the current CM Package based on the open folder\r\n     */\r\n    static getCurrentPackage( uri: Uri ): string {\r\n        var root = vscode.workspace.getWorkspaceFolder(uri).uri.fsPath;\r\n        var toMatch = [\"\\\\home\\\\\",\"\\\\base\\\\\",\"\\\\extensions\\\\\",\"\\\\personal\\\\\"];\r\n        var matchIndex = -1; \r\n        for (const match of toMatch) {\r\n            matchIndex = root.indexOf(match);\r\n            if ( matchIndex > -1 ) return root.substring(matchIndex + match.length).replace('\\\\', '.');;\r\n        }\r\n\r\n        // this shouldn't happen\r\n        return root;\r\n    }\r\n    \r\n    static getDirsUnder( symPath: string, parent: string ): string[] {\r\n        let dirs = fs.readdirSync(symPath)\r\n            .filter((file) => {\r\n                return file != \".vscode\" && file != \".git\" && fs.statSync(path.join( symPath, file)).isDirectory();\r\n            })\r\n            .map( (file) => {\r\n                return {\r\n                    name: file, \r\n                    path: parent ? parent + \".\" + file : file\r\n                }\r\n            });\r\n        \r\n        let subDirs = [];\r\n        \r\n        dirs.forEach(dir => {\r\n            subDirs = subDirs.concat( this.getDirsUnder( path.join( symPath, dir.name ), dir.path ) );\r\n        });\r\n        \r\n        return dirs.map( (d) => { return d.path } ).concat(subDirs);\r\n    }\r\n    \r\n    /**\r\n     * Gets the dotted string of the current command being typed\r\n     */\r\n    static getObjectNameForMember(document: vscode.TextDocument, varName: string): CurrentSymbol {\r\n        var items = varName.split('.');\r\n\r\n        var obj: CurrentSymbol = {\r\n            varName: items[0]\r\n        };\r\n\r\n        if (items.length > 1) {\r\n            obj.memberName = items[items.length - 1];\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    static getWordAtCursor(document: vscode.TextDocument, position: vscode.Position) {\r\n        var wordRange = document.getWordRangeAtPosition(position);\r\n        if (!wordRange) return \"\";\r\n        return document.getText(wordRange);\r\n    }\r\n    \r\n    /**\r\n     * Checks to see if the current word is a member of another object.\r\n     */\r\n    // static getObjectNameForMember( document: vscode.TextDocument, position: vscode.Position ): CurrentSymbol {\r\n    //     var wordAtPosition = document.getWordRangeAtPosition( position );\r\n    //     if ( !wordAtPosition ) {\r\n    //         wordAtPosition = new vscode.Range( position, position );\r\n    //     }\r\n    //     var prevWordPosition = new vscode.Position( wordAtPosition.start.line, wordAtPosition.start.character - 2 );\r\n    //     document.validatePosition( prevWordPosition );\r\n    //     var wordAtPrevPosition = document.getWordRangeAtPosition( prevWordPosition );\r\n        \r\n    //     // make sure we found a word\r\n    //     if ( wordAtPrevPosition ) {\r\n    //         var fullRange = new vscode.Range( wordAtPrevPosition.start, wordAtPosition.end );\r\n    //         var content = document.getText( fullRange );\r\n    //         if ( content.indexOf( \".\" ) > -1 ) {\r\n    //             // this is a method / member call\r\n    //             return {\r\n    //                 varName: document.getText(wordAtPrevPosition),\r\n    //                 memberName: document.getText(wordAtPosition)\r\n    //             };\r\n    //         }    \r\n    //     }\r\n        \r\n    //     return {\r\n    //         varName: document.getText(wordAtPosition)\r\n    //     };\r\n    // }\r\n    \r\n    static getUsingStatements(document: vscode.TextDocument): string[] {\r\n        var packageRegex = /package\\s+([\\w\\.]+)\\s*;/i;\r\n        var singleUseRegex = /use\\s+([\\w\\.]+)\\s*;/gmi;\r\n        var multiUseRegexPrefix = /use\\s+(\\w+)\\s*:\\s*([^;]*)/gmi;\r\n\r\n        var contents = document.getText();\r\n\r\n        var match, matches = [];\r\n\r\n        match = contents.match(packageRegex)\r\n\r\n        if (match && match.length > 0) {\r\n            matches.push(match[1]);\r\n        }\r\n\r\n        while (match = singleUseRegex.exec(contents)) {\r\n            matches.push(match[1]);\r\n        }\r\n\r\n        while (match = multiUseRegexPrefix.exec(contents)) {\r\n            var prefix = match[1];\r\n            var list: string = match[2];\r\n            var items = list.split(',');\r\n\r\n            items.forEach((i) => {\r\n                matches.push(`${prefix}.${i.trim()}`);\r\n            });\r\n        }\r\n\r\n        var globalUsings = cmUtils.packageFileUsings();\r\n\r\n        var results = [];\r\n\r\n        globalUsings.forEach((u) => {\r\n            results.push(u);\r\n        });\r\n\r\n        matches.forEach((u) => {\r\n            if (results.indexOf(u) < 0) results.push(u);\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    static getDottedCallsForLine(document: vscode.TextDocument, position: vscode.Position): string {\r\n        return cmUtils.getDottedCallsFromString(\r\n            document.getText(new vscode.Range(document.positionAt(0), position)),\r\n            document.offsetAt(position)\r\n        );\r\n    }\r\n\r\n    static getDottedCallsFromString(inputFile: string, index: number): string {\r\n        var lineExtracted = false;\r\n        var statementStack = [];\r\n        var lineOfCode = [];\r\n        let lineTerminators = [ \";\",\"{\",\"}\",\"=\",\",\",\"(\",\"?\" ];\r\n\r\n        while (!lineExtracted) {\r\n            if (index < 0) {\r\n                lineExtracted = statementStack.length == 0;\r\n                break;   \r\n            }\r\n            var currentChar = inputFile.charAt(index);\r\n            var shouldPush = false;\r\n\r\n            var peek = statementStack[statementStack.length - 1];\r\n\r\n            if ( lineTerminators.indexOf( currentChar ) > -1 ) {\r\n                if (statementStack.length == 0) {\r\n                    index++;\r\n                    lineExtracted = true;\r\n                    break;\r\n                } else if (currentChar == \"(\" && peek == \")\") {\r\n                    statementStack.pop();\r\n                }\r\n            } else if (currentChar == '\"') {\r\n                // check to make sure this isn't an escaped \"\r\n                var nestedQuote = index > 0 && inputFile.charAt(index - 1) == '\\\\';\r\n                if (!nestedQuote) {\r\n                    shouldPush = statementStack.length == 0 || peek == ')';\r\n                    if (peek == '\"') {\r\n                        statementStack.pop();\r\n                    } else if (!shouldPush) {\r\n                        // if it shouldn't be pushed, and wasn't in a string, we have a problem\r\n                        console.log('Statement format error');\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (currentChar == ')') {\r\n                // if the stack is empty, or it's inside another statement, add this one\r\n                shouldPush = statementStack.length == 0 || peek == ')';\r\n            }\r\n\r\n            if (shouldPush) statementStack.push(currentChar);\r\n            if (statementStack.length == 0 && currentChar != '(') lineOfCode.push(currentChar);\r\n            index--;\r\n        }\r\n\r\n        if (!lineExtracted) {\r\n            console.log(\"Couldn't Parse\");\r\n            //console.log( inputFile.substr( index, position.character - index ).trim() )\r\n        }\r\n        if (lineExtracted) {\r\n            var properLine = lineOfCode.reverse().join('').trim(); \r\n            //console.log( properLine );\r\n            var match = properLine.match( /(?:public\\s+)?class\\s+\\w+\\s+extends\\s+(.*)/ );\r\n            if ( match )  {            \r\n                return match[1];\r\n            }\r\n            return properLine.replace(/(\\/\\/.*(?:\\n|\\r\\n|\\n\\r))/, '' ).trim();\r\n        }\r\n    }\r\n    \r\n    private static timeout: NodeJS.Timer;\r\n    \r\n    static debounce( func: () => void, wait: number, immediate: boolean ): void {\r\n        let args = arguments;\r\n        let timeOut = cmUtils.timeout;\r\n        let context = this;\r\n        \r\n        let later = () => {\r\n            timeOut = null;\r\n            if (!immediate) func.apply(context, args);\r\n        };\r\n        let callNow = immediate && !timeOut;\r\n        clearTimeout(timeOut);\r\n        cmUtils.timeout = setTimeout(later, wait);\r\n        if (callNow) func.apply(context, args);\r\n    }\r\n    \r\n    static addCopyright( uri: vscode.Uri ) {\r\n        var copy = \r\n`/** Configura CET Source Copyright Notice (CETSC)\r\n\r\n   This file contains Configura CM source code and is part of the\r\n   Configura CET Development Platform (CETDEV). Configura CM\r\n   is a programming language created by Configura Sverige AB.\r\n   Configura, Configura CET and Configura CM are trademarks of\r\n   Configura Sverige AB. Configura Sverige AB owns Configura CET,\r\n   Configura CM, and CETDEV.\r\n\r\n   Copyright (C) 2004 Configura Sverige AB, All rights reserved.\r\n\r\n   You can modify this source file under the terms of the Configura CET\r\n   Source Licence Agreement (CETSL) as published by Configura Sverige AB.\r\n\r\n   Configura Sverige AB has exclusive rights to all changes, modifications,\r\n   and corrections of this source file. Configura Sverige AB has exclusive\r\n   rights to any new source file containing material from this source file.\r\n   A new source file based on this source file or containing material from\r\n   this source file has to include this Configura CET Source Copyright Notice\r\n   in its full content. All changes, modifications, and corrections mentioned\r\n   above shall be reported to Configura Sverige AB within One Month from\r\n   the date that the modification occurred.\r\n\r\n   Configura CM is distributed in the hope that it will be useful, but\r\n   WITHOUT ANY WARRANTY; without even the implied warranty of\r\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n   See the CETSL for more details.\r\n\r\n   You should have received a copy of the CETSL along with the CETDEV.\r\n   If not, write to Configura Sverige AB, Box 306, SE-581 02 Linköping, Sweden.\r\n   Tel +46 13377800, Fax +46 13377855,\r\n   Email: info@configura.com, www.configura.com\r\n\r\n   END OF CETSC\r\n*/\r\n\r\npackage {Package};\r\n\r\npublic class {Class} {\r\n    public constructor() {\r\n    }   \r\n}`;\r\n        var pkg = vscode.workspace.asRelativePath( uri, false ).replace(/\\\\/g, '/');\r\n        \r\n        pkg = pkg.substring( 0, pkg.lastIndexOf( '/' ) ).replace( /\\//g, '.' );\r\n        pkg = pkg == \"\" ? \"\" : '.' + pkg;\r\n\r\n        let nameSpace = cmUtils.getCurrentPackage(uri) + pkg;\r\n        \r\n        // add comment to top of file\r\n        vscode.workspace.openTextDocument( uri )\r\n        .then( (doc) => {\r\n            if ( doc.lineCount > 1 ) {\r\n                 // update the package\r\n                 let match = /^package\\s[^;]*/m.exec( doc.getText() );\r\n                 let start = match.index;\r\n                 let length = match[0].length;\r\n \r\n                 let range = new vscode.Range( doc.positionAt( start ), doc.positionAt( start + length ) );\r\n \r\n                 let wEdit = new vscode.WorkspaceEdit();\r\n                 wEdit.replace( doc.uri, range, \"package \" + nameSpace );\r\n                 vscode.workspace.applyEdit( wEdit )\r\n                 .then( res => {\r\n                     doc.save();  \r\n                 });\r\n                 \r\n                 return;\r\n            };\r\n            if ( doc.lineAt( 0 ).text.match( /Configura CET Source Copyright Notice/ ) ) { // it's already got the copyright, so don't add it again\r\n               return;\r\n            }\r\n            vscode.window.showTextDocument( doc )\r\n                .then( (editor) => {\r\n                    editor.edit( (edit) => {\r\n                        edit.insert( new vscode.Position( 0, 0 ), copy.replace( \"{Package}\", nameSpace ).replace( \"{Class}\", uri.path.substring( uri.path.lastIndexOf( '/' ) + 1, uri.path.lastIndexOf( '.' ) ) ) );\r\n                    } )\r\n                    .then( (res) => {\r\n                        const fileStart = new vscode.Position( 0, 0 );\r\n                        editor.selection = new vscode.Selection(fileStart, fileStart);\r\n                    })\r\n                        // return vscode.commands.executeCommand( \"editor.fold\" )\r\n                    .then( (res) => {\r\n                        const newPosition = new vscode.Position( 39, 4 );\r\n                        const newSelection = new vscode.Selection(newPosition, newPosition);\r\n                        editor.selection = newSelection;\r\n                        \r\n                        editor.revealRange( editor.selection, vscode.TextEditorRevealType.InCenter );\r\n                        \r\n                        doc.save();  \r\n                                \r\n                            // });\r\n                    })                    \r\n                } )\r\n        });\r\n    }\r\n\r\n    static createResourceTemplate(uri: vscode.Uri) {\r\n        var template =\r\n`package {Package};\r\n\r\n$ {\r\n    english \"\";\r\n}`;\r\n\r\n        var pkg = vscode.workspace.asRelativePath( uri, false ).replace(/\\\\/g, '/');\r\n\r\n        pkg = pkg.substring( 0, pkg.lastIndexOf( '/' ) ).replace( /\\//g, '.' );\r\n        pkg = pkg == \"\" ? \"\" : '.' + pkg;\r\n\r\n        let nameSpace = cmUtils.getCurrentPackage(uri) + pkg;\r\n\r\n        // var pkg = vscode.workspace.asRelativePath( uri );\r\n        \r\n        // pkg = pkg.substring( 0, pkg.lastIndexOf( '/' ) ).replace( /\\//g, '.' );\r\n        // pkg = cmUtils.getCurrentPackage(uri) + '.' + pkg;\r\n        \r\n        // add comment to top of file\r\n        vscode.workspace.openTextDocument( uri )\r\n        .then( (doc) => {\r\n            if ( doc.lineCount > 1 ) return;\r\n            if ( doc.lineAt( 0 ).text.match( /package / ) ) return;\r\n\r\n            vscode.window.showTextDocument( doc )\r\n                .then( (editor) => {\r\n                    editor.edit( (edit) => {\r\n                        edit.insert( new vscode.Position( 0, 0 ), template.replace( \"{Package}\", nameSpace ));\r\n                    } )\r\n                    .then( (res) => {\r\n                        const fileStart = new vscode.Position( 0, 0 );\r\n                        editor.selection = new vscode.Selection(fileStart, fileStart);\r\n                    })\r\n                    .then( (res) => {\r\n                        const newPosition = new vscode.Position( 2, 1 );\r\n                        const newSelection = new vscode.Selection(newPosition, newPosition);\r\n                        editor.selection = newSelection;\r\n                        \r\n                        editor.revealRange( editor.selection, vscode.TextEditorRevealType.InCenter );\r\n                        \r\n                        doc.save();\r\n                    })                    \r\n                } )\r\n        });\r\n    }\r\n}", "'use strict';\r\n\r\nimport { cmCompilerAdapter } from './cmCompilerAdapter';\r\nimport { cmConfig } from './cmConfig';\r\n\r\nconst fs = require('fs');\r\nvar didLoadScripts = false;\r\nvar scriptPackage = \"\";\r\nvar scriptFuncs = [];\r\n\r\nimport { commands, Disposable, Position, Range, Selection, TextDocument, TextEditor, Uri, window, workspace, TextEditorRevealType } from 'vscode';\r\n\r\nexport function registerCommands( compiler: cmCompilerAdapter ) {\r\n    let d1 = commands.registerCommand( \"cm.start\", () => compiler.start() );\r\n    let d2 = commands.registerCommand( \"cm.stopcm\", () => compiler.stop() );\r\n    let d3 = commands.registerCommand( \"cm.cleancm\", () => compiler.clean() );\r\n    let d4 = commands.registerCommand( \"cm.startcet\", () => compiler.run( `run(\"cet.runtime\",\"designer.cm\");`) );\r\n    let d5 = commands.registerCommand( \"cm.quitdebug\", () => compiler.quitDebug() );\r\n    \r\n    let d6 = commands.registerCommand( \"cm.runline\", () => {\r\n        validateCMFileAndRun( true, (editor) => {\r\n            var text = editor.document.lineAt( editor.selection.active.line ).text.trim();\r\n            compiler.run( text );\r\n        } );\r\n    } );\r\n    \r\n    let d7 = commands.registerCommand( \"cm.runcurrentfile\", (args) => {\r\n        validateCMFileAndRun( true, (editor) => {\r\n            compiler.runCurrentFile( editor.document.fileName );\r\n        } );\r\n    } );\r\n    \r\n    let d8 = commands.registerCommand( \"cm.compilefile\", (args) => {\r\n        if ( args && args.file ) {\r\n            compiler.compileFile( args.file );\r\n        } else {\r\n            validateCMFileAndRun( true, (editor) => {\r\n                compiler.compileFile( editor.document.fileName );\r\n            });\r\n        }\r\n        \r\n    } );\r\n    \r\n    let d9 = commands.registerCommand( \"cm.compilepackage\", () => {\r\n        validateCMFileAndRun( true, (editor) => {\r\n            compiler.compileFile( editor.document.fileName );\r\n        });\r\n    } );\r\n    \r\n    let d10 = commands.registerCommand( \"cm.loadall\", () => {\r\n        validateCMFileAndRun( true, (editor) => {\r\n            editor.document.save();\r\n            compiler.loadAllKnown( editor.document.fileName );\r\n        } );\r\n    } );\r\n    \r\n    let d11 = commands.registerCommand( \"cm.profileboot\", () => {\r\n        validateCMFileAndRun( false, (editor) => {\r\n            workspace.openTextDocument( getFilePathInUserProfile(\"boot.cm\") )\r\n            .then( (doc) => {\r\n                window.showTextDocument( doc );\r\n            });\r\n        } );\r\n    } );\r\n    \r\n    let d12 = commands.registerCommand( \"cm.compileallbelow\", () => {\r\n        compiler.compileVSWorkspace();\r\n    } );\r\n\r\n    let d30 = commands.registerCommand( \"cm.compileworkspace\", () => {\r\n        compiler.compileWorkspace();\r\n    })\r\n   \r\n    let d14 = commands.registerCommand( \"cm.runexternal\", (args) => {\r\n        // this is a hook for anything to run CM Commands via \"commands.executeCommand(...)\"\r\n        if ( typeof args == \"string\" ) {\r\n            compiler.run( args );\r\n        }\r\n    } )\r\n    \r\n    let d15 = commands.registerCommand( \"cm.startwriteoutputfile\", () => {\r\n        compiler.startWritingOutputFile();\r\n    });\r\n    \r\n    let d16 = commands.registerCommand( \"cm.stopwriteoutputfile\", () => {\r\n        compiler.stopWritingOutputFile();\r\n    });\r\n   \r\n    let scripts = commands.registerCommand( \"cm.userScript\", () => {\r\n        window.showQuickPick( getUserScripts() )\r\n        .then( (picked) => {\r\n            if ( picked ) {\r\n                let match = /([a-zA-Z0-9]*)\\s\\((.*)\\)/.exec(picked);\r\n                if ( match ) {\r\n                    compiler.run( `{ use ${match[2]}; ${match[1]}();}` );\r\n                }\r\n            }\r\n        }, (err) => {\r\n            console.log(\"ooo crap\");\r\n        } );\r\n    });\r\n\r\n    let d19 = commands.registerCommand('extension.openFile', file => {\r\n        workspace.openTextDocument( file ).then( doc => { window.showTextDocument( doc, { preserveFocus: true, preview: true } ); } );\r\n    });\r\n\r\n    let d20 = commands.registerCommand( \"cm.implements\", () => {\r\n        validateCMFileAndRun( true, (editor) => {\r\n            const offset = getPosition(editor);\r\n            compiler.run( `cm.runtime.implementsMethod(\"${editor.document.fileName.replace( /\\\\/g, '/' )}\", ${offset});` );\r\n        } );\r\n    } );\r\n\r\n    let d21 = commands.registerCommand( \"cm.subclasses\", () => {\r\n        validateCMFileAndRun( true, (editor) => {\r\n            const offset = getPosition(editor);\r\n            compiler.run( `cm.runtime.subClasses(\"${editor.document.fileName.replace( /\\\\/g, '/' )}\", [${offset},${offset}], 4);` );\r\n        })\r\n    });\r\n\r\n    let d22 = commands.registerCommand( \"cm.overrides\", () => {\r\n        validateCMFileAndRun( true, (editor) => {\r\n            const offset = getPosition(editor);\r\n            compiler.run( `cm.runtime.overridesMethod(\"${editor.document.fileName.replace( /\\\\/g, '/' )}\", ${offset});` );\r\n        })\r\n    });\r\n\r\n    let d25 = commands.registerCommand( \"cm.profiletest\", () => {\r\n        validateCMFileAndRun( false, (editor) => {\r\n            workspace.openTextDocument( getFilePathInUserProfile(\"t.cm\") )\r\n            .then( (doc) => {\r\n                window.showTextDocument( doc );\r\n            });\r\n        } );\r\n    } );\r\n\r\n    return Disposable.from( d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d14, d15, d16, scripts, d20, d21, d22 );\r\n}\r\n    \r\n    let d99 = commands.registerCommand( \"cm.Test\", () => {\r\n        console.log(\"I DID IT\");\r\n    } );\r\n\r\nfunction getPosition( editor: TextEditor ): Number {\r\n    const position = editor.selection.start;\r\n    let offset = editor.document.offsetAt( position ) + ( 1 - position.line ); // emacs is 1 based, and it treats line end as 1 character not 2;\r\n    return offset;\r\n}\r\n\r\nfunction getUserScripts(): Thenable<string[]> {\r\n    if ( scriptFuncs.length > 0 ) {\r\n        return Promise.resolve(scriptFuncs);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        workspace.workspaceFolders.forEach( wf => {\r\n            try {\r\n                let data = fs.readFileSync( wf.uri.fsPath + \"/vscode.scripts.cm\", \"utf8\" );\r\n                let myReg = /public\\s+void\\s+(.[^\\(\\)]*)\\s*\\(\\)/g;\r\n                let packageReg = /package\\s(.[^;]*);/;\r\n                scriptPackage = packageReg.exec( data )[1];\r\n                var myArr;\r\n                var myFuncs = [];\r\n                while ( ( myArr = myReg.exec(data) ) !== null ) {\r\n                    scriptFuncs.push(`${myArr[1]} (${scriptPackage})`);\r\n                }\r\n            } catch (err) {\r\n                // couldn't find the scripts file\r\n            }\r\n        });\r\n\r\n        if ( scriptFuncs.length == 0 ) {\r\n            reject(\"No User Scripts Found\");\r\n        } else {\r\n            didLoadScripts = true;\r\n            resolve(scriptFuncs);\r\n        }\r\n    });\r\n}\r\n\r\nexport function foldCopyright( editor: TextEditor ) {\r\n    if ( editor.document.uri.fsPath.endsWith( \".cm\" ) ) {\r\n        return commands.executeCommand( \"editor.fold\", { \"selectionLines\": [0] } )\r\n        .then( (val) => { \r\n            editor.revealRange( editor.selection, TextEditorRevealType.InCenterIfOutsideViewport );\r\n        }, \r\n        (err) => {\r\n            // console.log(err);\r\n        });\r\n    }\r\n}\r\n\r\nfunction validateCMFileAndRun( requireCMFile: boolean, func: ( editor: TextEditor ) => void ): void {\r\n    const editor = window.activeTextEditor;\r\n    if ( requireCMFile ) {\r\n        if ( !editor ) return;\r\n        editor.document.save();\r\n        if ( editor.document.languageId != \"cm\" ) return;\r\n    }\r\n    func( editor );\r\n}\r\n\r\nfunction getFilePathInUserProfile( file: string ): Uri {\r\n    const userName = process.env[\"USER\"] || process.env[\"USERNAME\"];\r\n    if ( !userName ) {\r\n        window.showErrorMessage( \"Unable to retrieve username\");\r\n        return;\r\n    }\r\n    let profilePath = cmConfig.cmGitMode() ? \"personal\" : \"home\";\r\n    return Uri.file( `${cmConfig.cmRoot()}\\\\${profilePath}\\\\profile\\\\${userName.toLowerCase()}\\\\${file}` );\r\n}"],
    "sourceRoot": ""
}